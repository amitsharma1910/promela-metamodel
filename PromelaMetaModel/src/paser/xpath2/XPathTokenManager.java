package paser.xpath2;
/* Generated By:JJTree&JavaCC: Do not edit this line. XPathTokenManager.java */
import java.io.*;
import java.util.Stack;
import java.util.Vector;
import org.w3c.dom.Element;
import org.w3c.dom.Document;
import javax.xml.parsers.*;
import org.w3c.dom.traversal.DocumentTraversal;
import org.w3c.dom.traversal.NodeFilter;
import org.w3c.dom.traversal.NodeIterator;
import org.w3c.dom.traversal.TreeWalker;

public class XPathTokenManager implements XPathConstants
{
  Stack stateStack = new Stack();
  // private Vector persistentLexStates  = new Vector();
  static final int PARENMARKER = 2000;

  /**
   * Push the current state onto the state stack.
   */
  private void pushState()
  {

    stateStack.addElement(new Integer(curLexState));
  }

  /**
   * Push the given state onto the state stack.
   * @param state Must be a valid state.
   */
  private void pushState(int state)
  {

    stateStack.push(new Integer(state));
  }

  /**
   * Pop the state on the state stack, and switch to that state.
   */
  private void popState()
  {
    if (stateStack.size() == 0)
    {
      printLinePos();
    }

    int nextState = ((Integer) stateStack.pop()).intValue();

    if(nextState == PARENMARKER)
      printLinePos();
    SwitchTo(nextState);
  }

  /**
   * Push the given state onto the state stack.
   * @param state Must be a valid state.
   */
  private boolean isState(int state)
  {
        for (int i = 0; i < stateStack.size(); i++) {
        if(((Integer) stateStack.elementAt(i)).intValue() == state)
        {
                return true;
        }
        }
        return false;
  }

  /**
   * Push a parenthesis state.  This pushes, in addition to the 
   * lexical state value, a special marker that lets 
   * resetParenStateOrSwitch(int state)
   * know if it should pop and switch.  Used for the comma operator.
   */
  private void pushParenState(int commaState, int rparState)
  {
    stateStack.push(new Integer(rparState));
    stateStack.push(new Integer(commaState));
    stateStack.push(new Integer(PARENMARKER));
    SwitchTo(commaState);
  }


  /**
   * Print the current line position.
   */
  public void printLinePos()
  {
    System.err.println("Line: " + input_stream.getEndLine());
  }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 80;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(0, 0);
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 80;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0xa0000000L) != 0L)
         {
            jjmatchedKind = 94;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_9(0x20000000L);
      case 58:
         return jjMoveStringLiteralDfa1_9(0x80000000L);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_9(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 58:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         break;
      default :
         break;
   }
   return jjStartNfa_9(0, 0L, active1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
private final int jjMoveNfa_9(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                     kind = 94;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 94;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 94)
                     kind = 94;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_8()
{
   return jjMoveNfa_8(0, 0);
}
private final int jjMoveNfa_8(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 80;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000L) != 0L)
            return 12;
         if ((active0 & 0x400100000000L) != 0L)
         {
            jjmatchedKind = 102;
            return -1;
         }
         if ((active0 & 0x9000000000000000L) != 0L)
            return 47;
         if ((active0 & 0xfbfa7f07fbdf3ecL) != 0L || (active1 & 0x100ffeL) != 0L)
         {
            jjmatchedKind = 98;
            return 48;
         }
         return -1;
      case 1:
         if ((active0 & 0x400100000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x7f016814220L) != 0L)
            return 48;
         if ((active0 & 0xfbfa000693cb1ccL) != 0L || (active1 & 0x100ffeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 1;
            }
            return 48;
         }
         return -1;
      case 2:
         if ((active0 & 0x148008L) != 0L)
            return 48;
         if ((active0 & 0xfbfa0006ba831c4L) != 0L || (active1 & 0x100ffeL) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 2;
            return 48;
         }
         return -1;
      case 3:
         if ((active0 & 0x2000060083040L) != 0L || (active1 & 0x82cL) != 0L)
            return 48;
         if ((active0 & 0xfbda0000ba00184L) != 0L || (active1 & 0x1007d2L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 3;
            }
            return 48;
         }
         return -1;
      case 4:
         if ((active0 & 0x200008200080L) != 0L)
            return 48;
         if ((active0 & 0xfbd800023800104L) != 0L || (active1 & 0x1007d2L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 4;
            return 48;
         }
         return -1;
      case 5:
         if ((active0 & 0x80000001000004L) != 0L)
            return 48;
         if ((active0 & 0xf3d800022800100L) != 0L || (active1 & 0x1007d2L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
            return 48;
         }
         return -1;
      case 6:
         if ((active1 & 0x240L) != 0L)
            return 48;
         if ((active0 & 0xf3d800022800100L) != 0L || (active1 & 0x100592L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 6;
            return 48;
         }
         return -1;
      case 7:
         if ((active0 & 0x900000022000000L) != 0L || (active1 & 0x100000L) != 0L)
            return 48;
         if ((active0 & 0x63d800000800100L) != 0L || (active1 & 0x592L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 7;
            }
            return 48;
         }
         return -1;
      case 8:
         if ((active0 & 0x639000000800100L) != 0L)
            return 48;
         if ((active0 & 0x804800000000000L) != 0L || (active1 & 0x592L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 8;
            }
            return 48;
         }
         return -1;
      case 9:
         if ((active0 & 0x4800000000000L) != 0L)
            return 48;
         if ((active0 & 0xa08000000000000L) != 0L || (active1 & 0x592L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 9;
            }
            return 48;
         }
         return -1;
      case 10:
         if ((active0 & 0xa0c000000000000L) != 0L || (active1 & 0x592L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 10;
            return 48;
         }
         return -1;
      case 11:
         if ((active0 & 0xa0c000000000000L) != 0L || (active1 & 0x592L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 11;
            return 48;
         }
         return -1;
      case 12:
         if ((active0 & 0xa0c000000000000L) != 0L || (active1 & 0x582L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 12;
            return 48;
         }
         if ((active1 & 0x10L) != 0L)
            return 48;
         return -1;
      case 13:
         if ((active0 & 0xa0c000000000000L) != 0L || (active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 13;
            return 48;
         }
         if ((active1 & 0x402L) != 0L)
            return 48;
         return -1;
      case 14:
         if ((active0 & 0xa0c000000000000L) != 0L || (active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 14;
            return 48;
         }
         return -1;
      case 15:
         if ((active0 & 0x20c000000000000L) != 0L || (active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 15;
            return 48;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x100L) != 0L)
            return 48;
         return -1;
      case 16:
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 16;
            return 48;
         }
         if ((active0 & 0x208000000000000L) != 0L)
            return 48;
         return -1;
      case 17:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 17;
            return 48;
         }
         if ((active0 & 0x4000000000000L) != 0L)
            return 48;
         return -1;
      case 18:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 18;
            return 48;
         }
         return -1;
      case 19:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 19;
            return 48;
         }
         return -1;
      case 20:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 20;
            return 48;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 36:
         return jjStopAtPos(0, 4);
      case 40:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      case 41:
         return jjStopAtPos(0, 11);
      case 42:
         return jjStartNfaWithStates_0(0, 17, 12);
      case 43:
         return jjStopAtPos(0, 83);
      case 44:
         return jjStopAtPos(0, 1);
      case 45:
         return jjStopAtPos(0, 82);
      case 46:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 60:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x80200000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 31);
      case 62:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x100800000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 64);
      case 64:
         return jjStopAtPos(0, 54);
      case 91:
         return jjStopAtPos(0, 61);
      case 93:
         return jjStopAtPos(0, 62);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x901000010008000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x200060000000L, 0x40L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4800000040000L, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1001002080L, 0x100202L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x18000000000008L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x30000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40002880220L, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20002000000000L, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4004000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x680000000000000L, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2000000000140L, 0x500L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8011000L, 0x820L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 124:
         return jjStopAtPos(0, 22);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 47:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 58:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         break;
      case 60:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 61:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 62:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000060000100L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x500L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 48);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 48);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0x6800000000004L, active1, 0x20L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 48);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 48);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000001000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 110:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x900000002a08000L, active1, 0L);
      case 111:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000100048L, active1, 0x58L);
      case 113:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 36, 48);
         break;
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0x600000008000000L, active1, 0x80L);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 48);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 42, 48);
         break;
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 48);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0x4L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0x100000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000001000000L, active1, 0x10L);
      case 100:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 48);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000008001080L, active1, 0x204L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x500L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000280000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1a000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000040L, active1, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x802L);
      case 114:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 3, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4800062002000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000800104L, active1, 0x100000L);
      case 118:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 48);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x604800000000000L, active1, 0x80L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 48);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 48);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 48);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x9a0000001800000L, active1, 0x100500L);
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 48);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x18200000000000L, active1, 0L);
      case 109:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x240L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 48);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000080L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x22000000L, active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L, active1, 0x10L);
      case 118:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x22000000L, active1, 0L);
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 48);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x604800000000000L, active1, 0x2c0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x510L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x800004L, active1, 0x100000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x920000000000100L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 48);
         break;
      case 121:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x500L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000020000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0L);
      case 110:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x4800002000000L, active1, 0x100240L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0x80L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 48);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x900000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x18000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x500L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x4800000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x618000000000100L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x900000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x82L);
      case 116:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 48);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 48);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x4800000000000L, active1, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000800000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 48);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 48);
         return jjMoveStringLiteralDfa8_0(active0, 0x100L, active1, 0x402L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L);
      case 108:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 48);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x618000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0x10L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 48);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 53, 48);
         break;
      case 103:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x208000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x4800000000000L, active1, 0x80L);
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2L);
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 48);
         break;
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 48);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x208000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L, active1, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active1, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x208000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x208000000000000L, active1, 0x180L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0x208000000000000L, active1, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2L);
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(12, 68, 48);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x480L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(13, 65, 48);
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x208000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80L);
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(13, 74, 48);
         break;
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x208000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x180L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(15, 72, 48);
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 59, 48);
         break;
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x208000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 103:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 51, 48);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 57, 48);
         break;
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x80L);
      case 102:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 50, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1);
      return 18;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa19_0(active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1);
}
private final int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1);
      return 19;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa20_0(active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1);
}
private final int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1);
      return 20;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa21_0(active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1);
}
private final int jjMoveStringLiteralDfa21_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1);
      return 21;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(21, 71, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1);
}
static final long[] jjbitVec4 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x7fffffL
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec7 = {
   0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL, 0xffffffffffffffffL, 0xfc31ffffffffe00fL
};
static final long[] jjbitVec8 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x3L
};
static final long[] jjbitVec9 = {
   0x0L, 0x0L, 0xfffffffbffffd740L, 0xffffd547f7fffL
};
static final long[] jjbitVec10 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
};
static final long[] jjbitVec11 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0x7fL, 0x707ffffff0000L
};
static final long[] jjbitVec12 = {
   0x7fffffe00000000L, 0xfffe0000000007feL, 0x7cffffffffffffffL, 0x60002f7fffL
};
static final long[] jjbitVec13 = {
   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec14 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
};
static final long[] jjbitVec15 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec16 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec17 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec18 = {
   0xd7ffffffffffeL, 0x3fL, 0x200d6caefef02596L, 0x1fL
};
static final long[] jjbitVec19 = {
   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec20 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec21 = {
   0x500000000007daedL, 0x2c62ab82315001L, 0xf580c90040000000L, 0x201080000000007L
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec23 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec24 = {
   0x4c4000000000L, 0x0L, 0x7L, 0x0L
};
static final long[] jjbitVec25 = {
   0x3fe00000080L, 0xfffffffffffffffeL, 0xfffffffe001fffffL, 0x7ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0x1fffffffffe0L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec28 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec29 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec30 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x30003L
};
static final long[] jjbitVec31 = {
   0xffffffffffffffffL, 0x30000003fL, 0xfffffffbffffd7c0L, 0xffffd547f7fffL
};
static final long[] jjbitVec32 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff007bL, 0x33fcfffffff199fL
};
static final long[] jjbitVec33 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe007fL, 0x707ffffff0016L
};
static final long[] jjbitVec34 = {
   0x7fffffe00000000L, 0xffff03ff0007ffffL, 0x7cffffffffffffffL, 0x3ff3dffffef7fffL
};
static final long[] jjbitVec35 = {
   0xf3ffffffffffffeeL, 0xffcfff1e3fffL, 0xd3c5fdfffff99feeL, 0x3ffcfb080399fL
};
static final long[] jjbitVec36 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100003bbfL
};
static final long[] jjbitVec37 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec38 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec39 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x0L, 0x0L
};
static final long[] jjbitVec40 = {
   0x7ff7ffffffffffeL, 0x3ff7fffL, 0x3bff6caefef02596L, 0x3ff3f5fL
};
static final long[] jjbitVec41 = {
   0xc2a003ff03000000L, 0xfffe03fffffffeffL, 0x2fe3ffffebf0fdfL, 0x0L
};
static final long[] jjbitVec42 = {
   0x0L, 0x0L, 0x0L, 0x21fff0000L
};
static final long[] jjbitVec43 = {
   0x3efffe000000a0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x77ffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 47;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 48:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 46;
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(43);
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 42;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddStates(0, 9);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 46)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 39)
                     jjCheckNAddStates(13, 15);
                  else if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 24);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(36);
                  }
                  break;
               case 1:
                  if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  break;
               case 2:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 4:
                  if (curChar == 34 && kind > 79)
                     kind = 79;
                  break;
               case 5:
               case 6:
                  if (curChar == 39)
                     jjCheckNAddStates(13, 15);
                  break;
               case 7:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 9:
                  if (curChar == 39 && kind > 79)
                     kind = 79;
                  break;
               case 10:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if ((0xffffffff00002600L & l) != 0L && kind > 102)
                     kind = 102;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddStates(0, 9);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar != 46)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 22:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 28:
                  if (curChar == 46)
                     jjCheckNAddStates(29, 31);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 31:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 35:
                  if (curChar == 46)
                     jjCheckNAddStates(10, 12);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 24);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 40:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 43:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if (curChar == 42 && kind > 100)
                     kind = 100;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(43);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 0:
                  if (kind > 102)
                     kind = 102;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAddStates(32, 36);
                  }
                  break;
               case 3:
                  jjAddStates(16, 18);
                  break;
               case 8:
                  jjAddStates(13, 15);
                  break;
               case 13:
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (kind > 102)
                     kind = 102;
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 33:
               case 34:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(34);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAddStates(32, 36);
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 48:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(40, 41);
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(43);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAddStates(32, 36);
                  }
                  break;
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(16, 18);
                  break;
               case 8:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(13, 15);
                  break;
               case 13:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 102)
                     kind = 102;
                  break;
               case 39:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAddStates(32, 36);
                  break;
               case 40:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 42:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(43);
                  break;
               case 43:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 47 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 80;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(0, 0);
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 80;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_6()
{
   return jjMoveNfa_6(0, 0);
}
private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 80;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 80;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_7()
{
   return jjMoveNfa_7(0, 0);
}
private final int jjMoveNfa_7(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 80;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   17, 18, 19, 21, 22, 24, 27, 28, 30, 33, 36, 37, 38, 7, 8, 9, 
   2, 3, 4, 38, 30, 33, 21, 22, 24, 27, 28, 30, 33, 29, 30, 33, 
   40, 41, 43, 44, 45, 25, 26, 31, 32, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec28[i2] & l2) != 0L);
      default : 
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec28[i2] & l2) != 0L);
      default : 
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", "\54", "\162\145\164\165\162\156", "\146\157\162", "\44", "\151\156", 
"\163\157\155\145", "\145\166\145\162\171", "\163\141\164\151\163\146\151\145\163", "\151\146", 
"\50", "\51", "\164\150\145\156", "\145\154\163\145", "\157\162", "\141\156\144", 
"\164\157", "\52", "\144\151\166", "\151\144\151\166", "\155\157\144", 
"\165\156\151\157\156", "\174", "\151\156\164\145\162\163\145\143\164", "\145\170\143\145\160\164", 
"\151\156\163\164\141\156\143\145", "\157\146", "\164\162\145\141\164", "\141\163", 
"\143\141\163\164\141\142\154\145", "\143\141\163\164", "\75", "\41\75", "\74\75", "\76", "\76\75", "\145\161", 
"\156\145", "\154\164", "\154\145", "\147\164", "\147\145", "\151\163", "\74\74", 
"\76\76", "\143\150\151\154\144", "\72\72", "\144\145\163\143\145\156\144\141\156\164", 
"\141\164\164\162\151\142\165\164\145", "\163\145\154\146", 
"\144\145\163\143\145\156\144\141\156\164\55\157\162\55\163\145\154\146", "\146\157\154\154\157\167\151\156\147\55\163\151\142\154\151\156\147", 
"\146\157\154\154\157\167\151\156\147", "\156\141\155\145\163\160\141\143\145", "\100", "\160\141\162\145\156\164", 
"\141\156\143\145\163\164\157\162", "\160\162\145\143\145\144\151\156\147\55\163\151\142\154\151\156\147", 
"\160\162\145\143\145\144\151\156\147", "\141\156\143\145\163\164\157\162\55\157\162\55\163\145\154\146", "\56\56", 
"\133", "\135", "\56", "\77", 
"\145\155\160\164\171\55\163\145\161\165\145\156\143\145", "\151\164\145\155", "\156\157\144\145", 
"\144\157\143\165\155\145\156\164\55\156\157\144\145", "\164\145\170\164", "\143\157\155\155\145\156\164", 
"\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156", "\163\143\150\145\155\141\55\141\164\164\162\151\142\165\164\145", 
"\145\154\145\155\145\156\164", "\163\143\150\145\155\141\55\145\154\145\155\145\156\164", "\164\171\160\145", 
null, null, null, null, null, null, "\55", "\53", 
"\145\170\164\145\162\156\141\154", null, null, null, null, null, null, "\74", null, null, null, null, "\57", 
"\57\57", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "OPERAND", 
   "OPERATOR", 
   "SINGLETYPE", 
   "ITEMTYPE", 
   "KINDTEST", 
   "CLOSEKINDTEST", 
   "OCCURRENCEINDICATOR", 
   "VARNAME", 
   "EXPR_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x10077081cffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0xe0010000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0xe0000000L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[47];
private final int[] jjstateSet = new int[94];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public XPathTokenManager(JavaCharStream stream)
{
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public XPathTokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 47; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 10 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
     case 9:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 93 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           pushState();
         break;
      case 95 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         popState();
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 91 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[91]);
         else
            image.append(jjstrLiteralImages[91]);
                              pushState(DEFAULT);
         break;
      default : 
         break;
   }
}
}
