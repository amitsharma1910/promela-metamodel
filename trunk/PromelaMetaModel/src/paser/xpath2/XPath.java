package paser.xpath2;
/* Generated By:JJTree&JavaCC: Do not edit this line. XPath.java */
import java.io.*;
import java.util.Stack;
import java.util.Vector;
import org.w3c.dom.Element;
import org.w3c.dom.Document;
import javax.xml.parsers.*;
import org.w3c.dom.traversal.DocumentTraversal;
import org.w3c.dom.traversal.NodeFilter;
import org.w3c.dom.traversal.NodeIterator;
import org.w3c.dom.traversal.TreeWalker;

public class XPath/*@bgen(jjtree)*/implements XPathTreeConstants, XPathConstants {/*@bgen(jjtree)*/
  protected JJTXPathState jjtree = new JJTXPathState();

      boolean m_isMatchPattern = false;
      boolean isStep = false;

                  Stack binaryTokenStack = new Stack();

                  public Node createNode(int id) {
                          return null;
                  }


                 void processToken(SimpleNode n, Token t)
                  {


                          if(t.kind == XPathConstants.Slash && n.id != XPathTreeConstants.JJTSLASH)
                                  return;

                          n.processToken(t);
                  }




                  public static void main(String args[])
                     throws Exception
                  {

        int numberArgsLeft = args.length;
        int argsStart = 0;
        boolean isMatchParser = false;
        boolean dumpTree = false;
        while (numberArgsLeft > 0) {
            try {

                if (args[argsStart].equals("-dumptree")) {
                    dumpTree = true;
                    argsStart++;
                    numberArgsLeft--;
                }
                else if (args[argsStart].equals("-match")) {
                    isMatchParser = true;
                    System.out.println("Match Pattern Parser");
                    argsStart++;
                    numberArgsLeft--;
                } else if ("-file".equalsIgnoreCase(args[argsStart])) {
                    argsStart++;
                    numberArgsLeft--;
                    System.out.println("Running test for: " + args[argsStart]);
                    File file = new File(args[argsStart]);
                    argsStart++;
                    numberArgsLeft--;
                    Reader fis = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
                    XPath parser = new XPath(fis);
                    SimpleNode tree = parser.XPath2();
                    if (dumpTree)
                        tree.dump("|");
                } else if (args[argsStart].endsWith(".xquery")) {
                    System.out.println("Running test for: " + args[argsStart]);
                    File file = new File(args[argsStart]);
                    argsStart++;
                    numberArgsLeft--;
                    Reader fis = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
                    XPath parser = new XPath(fis);
                    SimpleNode tree = parser.XPath2();
                    if (dumpTree)
                        tree.dump("|");
                }         else if ("-catalog".equalsIgnoreCase(args[argsStart])) {
                    argsStart++;
                    numberArgsLeft--;
                    String catalogFileName = args[argsStart];
                    argsStart++;
                    numberArgsLeft--;
                    System.out.println("Running catalog for: "
                            + catalogFileName);
                    DocumentBuilderFactory dbf = DocumentBuilderFactory
                            .newInstance();
                    DocumentBuilder db = dbf.newDocumentBuilder();
                    Document doc = db.parse(catalogFileName);

                    NodeIterator testCases = ((DocumentTraversal) doc)
                            .createNodeIterator(doc, NodeFilter.SHOW_ELEMENT,
                                    new NodeFilter() {
                                        public short acceptNode(
                                                org.w3c.dom.Node node) {
                                            String nm = node.getNodeName();
                                            return (nm.equals("test-case")) ? NodeFilter.FILTER_ACCEPT
                                                    : NodeFilter.FILTER_SKIP;
                                        }
                                    }, true);
                    org.w3c.dom.Element testCase;
                    int totalCount = 0;
                    Vector failedList = new Vector();
                    while ((testCase = (org.w3c.dom.Element) testCases
                            .nextNode()) != null) {
                        NodeIterator queryies = ((DocumentTraversal) doc)
                                .createNodeIterator(testCase,
                                        NodeFilter.SHOW_ELEMENT,
                                        new NodeFilter() {
                                            public short acceptNode(
                                                    org.w3c.dom.Node node) {
                                                String nm = node.getNodeName();
                                                return (nm.equals("query")) ? NodeFilter.FILTER_ACCEPT
                                                        : NodeFilter.FILTER_SKIP;
                                            }
                                        }, true);
                        org.w3c.dom.Element query;
                        while ((query = (org.w3c.dom.Element) queryies
                                .nextNode()) != null) {
                            String fileString = query.getAttribute("name");
                            String locString = testCase
                                    .getAttribute("FilePath").replace('/',
                                            File.separatorChar);
                            File catFile = new File(catalogFileName);
                            String locCatFile = catFile.getParent();
                            String absFileName = locCatFile + File.separator
                                    + "Queries" + File.separator + "XQuery"
                                    + File.separator + locString + fileString;

                            if (dumpTree) {
                                System.out.print("== ");
                                System.out.print(absFileName);
                                System.out.println(" ==");
                            } else
                                System.out.print(".");

                            boolean isParseError = false;
                            String scenario = testCase.getAttribute("scenario");
                            if (scenario.equals("parse-error"))
                                isParseError = true;

                            totalCount++;

                            try {
                                File file = new File(absFileName);
                                Reader fis = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
                                XPath parser = new XPath(fis);
                                SimpleNode tree = parser.XPath2();
                                if(isParseError)
                                    failedList.addElement(fileString);
                                if (dumpTree)
                                    tree.dump("|");
                            } catch (Exception e) {
                                if(!isParseError)
                                    failedList.addElement(fileString);
                            } catch (Error e2) {
                                if(!isParseError)
                                    failedList.addElement(fileString);
                            }

                        }

                    }
                    System.out.println();
                    if(failedList.size() > 0)
                    {
                        System.out.print("FAILED: ");
                        for(int i = 0; i < failedList.size(); i++)
                        {
                            String fname = (String)failedList.elementAt(i);
                            System.out.print(fname);
                            if((i+1) != failedList.size())
                                System.out.print(", ");
                        }
                        System.out.println();
                        System.out.print("Failed "+failedList.size()+" out of ");
                    }
                    else
                    {
                        System.out.print("Total Success!! ");
                    }
                    System.out.println(totalCount+" cases");

                }

        else
        {
                                for(int i = argsStart; i < args.length; i++)
                                {
                                        System.out.println();
                                        System.out.println("Test["+i+"]: "+args[i]);
          Reader fis = new BufferedReader(new InputStreamReader(new java.io.StringBufferInputStream(args[i]), "UTF-8"));
                                        XPath parser = new XPath(fis);
          SimpleNode tree;
          if(isMatchParser)
          {
                                        tree = parser.XPath2();
          }
          else
          {
                                        tree = parser.XPath2();
          }
                                        ((SimpleNode)tree.jjtGetChild(0)).dump("|") ;
          break;
                                }
                                System.out.println("Success!!!!");
        }
                        }
                        catch(ParseException pe)
                        {
                                System.err.println(pe.getMessage());
                        }
                        return;
                   }
                    java.io.DataInputStream dinput = new java.io.DataInputStream(System.in);
                    while(true)
                    {
                          try
                          {
                              System.err.println("Type Expression: ");
                              String input =  dinput.readLine();
                              if(null == input || input.trim().length() == 0)
                                break;
                              XPath parser = new XPath(new BufferedReader(new InputStreamReader(new java.io.StringBufferInputStream(input), "UTF-8")));
          SimpleNode tree;
          if(isMatchParser)
          {
                                        tree = parser.XPath2();
          }
          else
          {
                                        tree = parser.XPath2();
          }
                              ((SimpleNode)tree.jjtGetChild(0)).dump("|") ;
                          }
                          catch(ParseException pe)
                          {
                                System.err.println(pe.getMessage());
                          }
                          catch(Exception e)
                          {
                                System.err.println(e.getMessage());
                          }
                    }
                  }

  final public SimpleNode XPath2() throws ParseException {
                 /*@bgen(jjtree) XPath2 */
  SimpleNode jjtn000 = new SimpleNode(this, JJTXPATH2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      XPath();
      jj_consume_token(0);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    {if (true) return jjtn000 ;}
    } catch (Throwable jjte000) {
                    if (jjtc000) {
                      jjtree.clearNodeScope(jjtn000);
                      jjtc000 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte000 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte000;}
                    }
                    if (jjte000 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte000;}
                    }
                    {if (true) throw (Error)jjte000;}
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void XPath() throws ParseException {
 /*@bgen(jjtree) XPath */
  SimpleNode jjtn000 = new SimpleNode(this, JJTXPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Expr() throws ParseException {
 /*@bgen(jjtree) Expr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExprSingle();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(1);
        ExprSingle();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExprSingle() throws ParseException {
    if (jj_2_1(2)) {
      ForExpr();
    } else if (jj_2_2(2)) {
      QuantifiedExpr();
    } else if (jj_2_3(2)) {
      IfExpr();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case Minus:
      case Plus:
      case External:
      case Slash:
      case SlashSlash:
      case QNameToken:
      case NCNameColonStar:
      case StarColonNCName:
        OrExpr();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ForExpr() throws ParseException {
 /*@bgen(jjtree) ForExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimpleForClause();
      jj_consume_token(2);
      ExprSingle();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SimpleForClause() throws ParseException {
    jj_consume_token(3);
    jj_consume_token(4);
    VarName();
    jj_consume_token(5);
    ExprSingle();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(1);
      jj_consume_token(4);
      VarName();
      jj_consume_token(5);
      ExprSingle();
    }
  }

  final public void QuantifiedExpr() throws ParseException {
 /*@bgen(jjtree) QuantifiedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTQUANTIFIEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        jj_consume_token(6);
          jjtn000.processValue("some");
        break;
      case 7:
        jj_consume_token(7);
                                                   jjtn000.processValue("every");
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(4);
      VarName();
      jj_consume_token(5);
      ExprSingle();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        jj_consume_token(1);
        jj_consume_token(4);
        VarName();
        jj_consume_token(5);
        ExprSingle();
      }
      jj_consume_token(8);
      ExprSingle();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IfExpr() throws ParseException {
 /*@bgen(jjtree) IfExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTIFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(9);
      jj_consume_token(10);
      Expr();
      jj_consume_token(11);
      jj_consume_token(12);
      ExprSingle();
      jj_consume_token(13);
      ExprSingle();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OperatorExpr() throws ParseException {
    OrExpr();
  }

  final public void OrExpr() throws ParseException {
 /*@bgen(jjtree) #OrExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpr();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(14);
                                binaryTokenStack.push(token);
        AndExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTOREXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
         try
         {
                           processToken(jjtn001, (Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           {if (true) throw e;}
         }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void AndExpr() throws ParseException {
 /*@bgen(jjtree) #AndExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ComparisonExpr();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 15:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        jj_consume_token(15);
                                binaryTokenStack.push(token);
        ComparisonExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTANDEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
         try
         {
                           processToken(jjtn001, (Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           {if (true) throw e;}
         }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void ComparisonExpr() throws ParseException {
 /*@bgen(jjtree) #ComparisonExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPARISONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RangeExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case LessThanOpOrTagO:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
          ValueComp();
          break;
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case LessThanOpOrTagO:
          GeneralComp();
          break;
        case 42:
        case 43:
        case 44:
          NodeComp();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        RangeExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTCOMPARISONEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
         try
         {
                           processToken(jjtn001, (Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           {if (true) throw e;}
         }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void RangeExpr() throws ParseException {
 /*@bgen(jjtree) #RangeExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTRANGEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AdditiveExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        jj_consume_token(16);
                                binaryTokenStack.push(token);
        AdditiveExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTRANGEEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
         try
         {
                           processToken(jjtn001, (Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           {if (true) throw e;}
         }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void AdditiveExpr() throws ParseException {
 /*@bgen(jjtree) #AdditiveExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTADDITIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultiplicativeExpr();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Minus:
        case Plus:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Plus:
          jj_consume_token(Plus);

          binaryTokenStack.push(token);
          break;
        case Minus:
          jj_consume_token(Minus);

          binaryTokenStack.push(token);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTADDITIVEEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
         try
         {
                           processToken(jjtn001, (Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           {if (true) throw e;}
         }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void MultiplicativeExpr() throws ParseException {
 /*@bgen(jjtree) #MultiplicativeExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMULTIPLICATIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnionExpr();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 17:
        case 18:
        case 19:
        case 20:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 17:
          jj_consume_token(17);
                                binaryTokenStack.push(token);
          break;
        case 18:
          jj_consume_token(18);
                                binaryTokenStack.push(token);
          break;
        case 19:
          jj_consume_token(19);
                                binaryTokenStack.push(token);
          break;
        case 20:
          jj_consume_token(20);
                                binaryTokenStack.push(token);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnionExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTMULTIPLICATIVEEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
         try
         {
                           processToken(jjtn001, (Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           {if (true) throw e;}
         }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void UnionExpr() throws ParseException {
 /*@bgen(jjtree) #UnionExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTUNIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IntersectExceptExpr();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 21:
        case 22:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 21:
          jj_consume_token(21);
                                binaryTokenStack.push(token);
          break;
        case 22:
          jj_consume_token(22);
                                binaryTokenStack.push(token);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        IntersectExceptExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTUNIONEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
         try
         {
                           processToken(jjtn001, (Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           {if (true) throw e;}
         }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void IntersectExceptExpr() throws ParseException {
 /*@bgen(jjtree) #IntersectExceptExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINTERSECTEXCEPTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InstanceofExpr();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 23:
        case 24:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 23:
          jj_consume_token(23);
                                binaryTokenStack.push(token);
          break;
        case 24:
          jj_consume_token(24);
                                binaryTokenStack.push(token);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        InstanceofExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTINTERSECTEXCEPTEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
         try
         {
                           processToken(jjtn001, (Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           {if (true) throw e;}
         }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void InstanceofExpr() throws ParseException {
 /*@bgen(jjtree) #InstanceofExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINSTANCEOFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TreatExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        jj_consume_token(25);
        jj_consume_token(26);
        SequenceType();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void TreatExpr() throws ParseException {
 /*@bgen(jjtree) #TreatExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTREATEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CastableExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
        jj_consume_token(28);
        SequenceType();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void CastableExpr() throws ParseException {
 /*@bgen(jjtree) #CastableExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCASTABLEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CastExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        jj_consume_token(29);
        jj_consume_token(28);
        SingleType();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void CastExpr() throws ParseException {
 /*@bgen(jjtree) #CastExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCASTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        jj_consume_token(30);
        jj_consume_token(28);
        SingleType();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void UnaryExpr() throws ParseException {
 /*@bgen(jjtree) #UnaryExpr( keepUnary) */
 SimpleNode jjtn000 = new SimpleNode(this, JJTUNARYEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);boolean keepUnary=false;
    try {
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Minus:
        case Plus:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Minus:
          jj_consume_token(Minus);
            SimpleNode jjtn001 = new SimpleNode(this, JJTMINUS);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          try {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtc001 = false;
           keepUnary=true;processToken(jjtn001, token);
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
            }
          }
          break;
        case Plus:
          jj_consume_token(Plus);
                                                                                SimpleNode jjtn002 = new SimpleNode(this, JJTPLUS);
                                                                                boolean jjtc002 = true;
                                                                                jjtree.openNodeScope(jjtn002);
          try {
                                                                                jjtree.closeNodeScope(jjtn002,  true);
                                                                                jjtc002 = false;
                                                                  keepUnary=true;processToken(jjtn002, token);
          } finally {
                                                                                if (jjtc002) {
                                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                                }
          }
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      ValueExpr();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  keepUnary);
    }
    }
  }

  final public void ValueExpr() throws ParseException {
    PathExpr();
  }

  final public void GeneralComp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
                                binaryTokenStack.push(token);
      break;
    case 32:
      jj_consume_token(32);
                                binaryTokenStack.push(token);
      break;
    case LessThanOpOrTagO:
      jj_consume_token(LessThanOpOrTagO);
                                               /* Careful! */ token_source.SwitchTo(DEFAULT); token_source.stateStack.pop();  /* jjtThis.processToken(token); */
          binaryTokenStack.push(token);
      break;
    case 33:
      jj_consume_token(33);
                                binaryTokenStack.push(token);
      break;
    case 34:
      jj_consume_token(34);
                                binaryTokenStack.push(token);
      break;
    case 35:
      jj_consume_token(35);
                                binaryTokenStack.push(token);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ValueComp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
      jj_consume_token(36);
                                binaryTokenStack.push(token);
      break;
    case 37:
      jj_consume_token(37);
                                binaryTokenStack.push(token);
      break;
    case 38:
      jj_consume_token(38);
                                binaryTokenStack.push(token);
      break;
    case 39:
      jj_consume_token(39);
                                binaryTokenStack.push(token);
      break;
    case 40:
      jj_consume_token(40);
                                binaryTokenStack.push(token);
      break;
    case 41:
      jj_consume_token(41);
                                binaryTokenStack.push(token);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NodeComp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
                                binaryTokenStack.push(token);
      break;
    case 43:
      jj_consume_token(43);
                                binaryTokenStack.push(token);
      break;
    case 44:
      jj_consume_token(44);
                                binaryTokenStack.push(token);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PathExpr() throws ParseException {
 /*@bgen(jjtree) #PathExpr(> 0) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPATHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Slash:
        jj_consume_token(Slash);
         SimpleNode jjtn001 = new SimpleNode(this, JJTSLASH);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
        try {
         jjtree.closeNodeScope(jjtn001,  true);
         jjtc001 = false;
        processToken(jjtn001, token);
        } finally {
         if (jjtc001) {
           jjtree.closeNodeScope(jjtn001,  true);
         }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 45:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 63:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case IntegerLiteral:
        case DecimalLiteral:
        case DoubleLiteral:
        case StringLiteral:
        case External:
        case QNameToken:
        case NCNameColonStar:
        case StarColonNCName:
          RelativePathExpr();
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        break;
      case SlashSlash:
        jj_consume_token(SlashSlash);
              SimpleNode jjtn002 = new SimpleNode(this, JJTSLASHSLASH);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
        try {
              jjtree.closeNodeScope(jjtn002,  true);
              jjtc002 = false;
             processToken(jjtn002, token);
        } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  true);
              }
        }
        RelativePathExpr();
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case External:
      case QNameToken:
      case NCNameColonStar:
      case StarColonNCName:
        RelativePathExpr();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
    }
    }
  }

  final public void RelativePathExpr() throws ParseException {
    StepExpr();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Slash:
      case SlashSlash:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Slash:
        jj_consume_token(Slash);
                       processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      case SlashSlash:
        jj_consume_token(SlashSlash);
                                                                                              SimpleNode jjtn001 = new SimpleNode(this, JJTSLASHSLASH);
                                                                                              boolean jjtc001 = true;
                                                                                              jjtree.openNodeScope(jjtn001);
        try {
                                                                                              jjtree.closeNodeScope(jjtn001,  true);
                                                                                              jjtc001 = false;
                                                                                             processToken(jjtn001, token);
        } finally {
                                                                                              if (jjtc001) {
                                                                                                jjtree.closeNodeScope(jjtn001,  true);
                                                                                              }
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      StepExpr();
    }
  }

  final public void StepExpr() throws ParseException {
 /*@bgen(jjtree) #StepExpr(> 1 || isStep) */
 SimpleNode jjtn000 = new SimpleNode(this, JJTSTEPEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);boolean savedIsStep = isStep; isStep=false;
    try {
      if (jj_2_4(3)) {
        FilterExpr();
                              jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1 || isStep);
                              jjtc000 = false;
                             isStep = savedIsStep;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 45:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case External:
        case QNameToken:
        case NCNameColonStar:
        case StarColonNCName:
                                                       isStep=true;
          AxisStep();
                                                                                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1 || isStep);
                                                                                jjtc000 = false;
                                                                               isStep = savedIsStep;
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1 || isStep);
    }
    }
  }

  final public void AxisStep() throws ParseException {
    if (jj_2_5(2)) {
      ReverseStep();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case External:
      case QNameToken:
      case NCNameColonStar:
      case StarColonNCName:
        ForwardStep();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    PredicateList();
  }

  final public void ForwardStep() throws ParseException {
    if (jj_2_6(2)) {
      ForwardAxis();
      NodeTest();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case External:
      case QNameToken:
      case NCNameColonStar:
      case StarColonNCName:
        AbbrevForwardStep();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ForwardAxis() throws ParseException {
 /*@bgen(jjtree) ForwardAxis */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFORWARDAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        jj_consume_token(45);
        jjtn000.processValue("child");
        jj_consume_token(46);
        break;
      case 47:
        jj_consume_token(47);
             jjtn000.processValue("descendant");
        jj_consume_token(46);
        break;
      case 48:
        jj_consume_token(48);
            jjtn000.processValue("attribute");
        jj_consume_token(46);
        break;
      case 49:
        jj_consume_token(49);
       jjtn000.processValue("self");
        jj_consume_token(46);
        break;
      case 50:
        jj_consume_token(50);
                     jjtn000.processValue("descendant-or-self");
        jj_consume_token(46);
        break;
      case 51:
        jj_consume_token(51);
                    jjtn000.processValue("following-sibling");
        jj_consume_token(46);
        break;
      case 52:
        jj_consume_token(52);
            jjtn000.processValue("following");
        jj_consume_token(46);
        break;
      case 53:
        jj_consume_token(53);
            jjtn000.processValue("namespace");
        jj_consume_token(46);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AbbrevForwardStep() throws ParseException {
 /*@bgen(jjtree) AbbrevForwardStep */
  SimpleNode jjtn000 = new SimpleNode(this, JJTABBREVFORWARDSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        jj_consume_token(54);
       jjtn000.processValue("@");
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      NodeTest();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ReverseStep() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
      ReverseAxis();
      NodeTest();
      break;
    case 60:
      AbbrevReverseStep();
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ReverseAxis() throws ParseException {
 /*@bgen(jjtree) ReverseAxis */
  SimpleNode jjtn000 = new SimpleNode(this, JJTREVERSEAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
        jj_consume_token(55);
         jjtn000.processValue("parent");
        jj_consume_token(46);
        break;
      case 56:
        jj_consume_token(56);
           jjtn000.processValue("ancestor");
        jj_consume_token(46);
        break;
      case 57:
        jj_consume_token(57);
                    jjtn000.processValue("preceding-sibling");
        jj_consume_token(46);
        break;
      case 58:
        jj_consume_token(58);
            jjtn000.processValue("preceding");
        jj_consume_token(46);
        break;
      case 59:
        jj_consume_token(59);
                   jjtn000.processValue("ancestor-or-self");
        jj_consume_token(46);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AbbrevReverseStep() throws ParseException {
 /*@bgen(jjtree) AbbrevReverseStep */
  SimpleNode jjtn000 = new SimpleNode(this, JJTABBREVREVERSESTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(60);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NodeTest() throws ParseException {
 /*@bgen(jjtree) NodeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNODETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_7(2)) {
        KindTest();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 45:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case External:
        case QNameToken:
        case NCNameColonStar:
        case StarColonNCName:
          NameTest();
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NameTest() throws ParseException {
 /*@bgen(jjtree) NameTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNAMETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case External:
      case QNameToken:
        QName();
        break;
      case 17:
      case NCNameColonStar:
      case StarColonNCName:
        Wildcard();
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Wildcard() throws ParseException {
 /*@bgen(jjtree) Wildcard */
  SimpleNode jjtn000 = new SimpleNode(this, JJTWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        jj_consume_token(17);
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
       jjtn000.processValue("*");
        break;
      case NCNameColonStar:
        jj_consume_token(NCNameColonStar);
                                                        SimpleNode jjtn001 = new SimpleNode(this, JJTNCNAMECOLONSTAR);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
        try {
                                                        jjtree.closeNodeScope(jjtn001,  true);
                                                        jjtc001 = false;
                                                       processToken(jjtn001, token);
        } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001,  true);
                                                        }
        }
        break;
      case StarColonNCName:
        jj_consume_token(StarColonNCName);
                                                                                                                                  SimpleNode jjtn002 = new SimpleNode(this, JJTSTARCOLONNCNAME);
                                                                                                                                  boolean jjtc002 = true;
                                                                                                                                  jjtree.openNodeScope(jjtn002);
        try {
                                                                                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                                  jjtc002 = false;
                                                                                                          processToken(jjtn002, token);
        } finally {
                                                                                                                                  if (jjtc002) {
                                                                                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                                  }
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FilterExpr() throws ParseException {
    PrimaryExpr();
    PredicateList();
  }

  final public void PredicateList() throws ParseException {
 /*@bgen(jjtree) #PredicateList(> 0) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPREDICATELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 61:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_12;
        }
        Predicate();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
    }
    }
  }

  final public void Predicate() throws ParseException {
 /*@bgen(jjtree) #Predicate(> 0) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(61);
      Expr();
      jj_consume_token(62);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
    }
    }
  }

  final public void PrimaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
    case StringLiteral:
      Literal();
      break;
    case 4:
      VarRef();
      break;
    case 10:
      ParenthesizedExpr();
      break;
    case 63:
                                                 isStep=true;
      ContextItemExpr();
      break;
    default:
      jj_la1[42] = jj_gen;
      if (jj_2_8(2)) {
        FunctionCall();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
      NumericLiteral();
      break;
    case StringLiteral:
      jj_consume_token(StringLiteral);
                                       SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
      try {
                                       jjtree.closeNodeScope(jjtn001,  true);
                                       jjtc001 = false;
                                      processToken(jjtn001, token);
      } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  true);
                                       }
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumericLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
      jj_consume_token(IntegerLiteral);
                     SimpleNode jjtn001 = new SimpleNode(this, JJTINTEGERLITERAL);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
                     jjtree.closeNodeScope(jjtn001,  true);
                     jjtc001 = false;
                    processToken(jjtn001, token);
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  true);
                     }
      }
      break;
    case DecimalLiteral:
      jj_consume_token(DecimalLiteral);
                                                                                             SimpleNode jjtn002 = new SimpleNode(this, JJTDECIMALLITERAL);
                                                                                             boolean jjtc002 = true;
                                                                                             jjtree.openNodeScope(jjtn002);
      try {
                                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                                             jjtc002 = false;
                                                                      processToken(jjtn002, token);
      } finally {
                                                                                             if (jjtc002) {
                                                                                               jjtree.closeNodeScope(jjtn002,  true);
                                                                                             }
      }
      break;
    case DoubleLiteral:
      jj_consume_token(DoubleLiteral);
                                                                                                                                                                    SimpleNode jjtn003 = new SimpleNode(this, JJTDOUBLELITERAL);
                                                                                                                                                                    boolean jjtc003 = true;
                                                                                                                                                                    jjtree.openNodeScope(jjtn003);
      try {
                                                                                                                                                                    jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                    jjtc003 = false;
                                                                                                                       processToken(jjtn003, token);
      } finally {
                                                                                                                                                                    if (jjtc003) {
                                                                                                                                                                      jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                    }
      }
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VarRef() throws ParseException {
    jj_consume_token(4);
    VarName();
  }

  final public void VarName() throws ParseException {
 /*@bgen(jjtree) VarName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVARNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ParenthesizedExpr() throws ParseException {
 /*@bgen(jjtree) ParenthesizedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARENTHESIZEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case Minus:
      case Plus:
      case External:
      case Slash:
      case SlashSlash:
      case QNameToken:
      case NCNameColonStar:
      case StarColonNCName:
        Expr();
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      jj_consume_token(11);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ContextItemExpr() throws ParseException {
 /*@bgen(jjtree) ContextItemExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONTEXTITEMEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(63);
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
      jjtn000.processValue(".");
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionCall() throws ParseException {
 /*@bgen(jjtree) FunctionCall */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionQName();
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case Minus:
      case Plus:
      case External:
      case Slash:
      case SlashSlash:
      case QNameToken:
      case NCNameColonStar:
      case StarColonNCName:
        ExprSingle();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 1:
            ;
            break;
          default:
            jj_la1[46] = jj_gen;
            break label_13;
          }
          jj_consume_token(1);
          ExprSingle();
        }
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(11);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SingleType() throws ParseException {
 /*@bgen(jjtree) SingleType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSINGLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AtomicType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        jj_consume_token(64);
                    jjtn000.processValue("?");
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SequenceType() throws ParseException {
 /*@bgen(jjtree) SequenceType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSEQUENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_9(2)) {
        jj_consume_token(65);
                 jjtn000.processValue("empty-sequence");
        jj_consume_token(10);
        jj_consume_token(11);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 45:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case External:
        case QNameToken:
          ItemType();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 17:
          case 64:
          case Plus:
            OccurrenceIndicator();
            break;
          default:
            jj_la1[49] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OccurrenceIndicator() throws ParseException {
 /*@bgen(jjtree) OccurrenceIndicator */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOCCURRENCEINDICATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        jj_consume_token(64);
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
       jjtn000.processValue("?");
        break;
      case 17:
        jj_consume_token(17);
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                         jjtn000.processValue("*");
        break;
      case Plus:
        jj_consume_token(Plus);
                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                               jjtc000 = false;
                                                                              processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ItemType() throws ParseException {
 /*@bgen(jjtree) ItemType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTITEMTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_10(2)) {
        KindTest();
      } else if (jj_2_11(2)) {
        jj_consume_token(66);
       jjtn000.processValue("item");
        jj_consume_token(10);
        jj_consume_token(11);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 45:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case External:
        case QNameToken:
          AtomicType();
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AtomicType() throws ParseException {
 /*@bgen(jjtree) AtomicType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATOMICTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void KindTest() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
      DocumentTest();
      break;
    case 73:
      ElementTest();
      break;
    case 48:
      AttributeTest();
      break;
    case 74:
      SchemaElementTest();
      break;
    case 72:
      SchemaAttributeTest();
      break;
    case 71:
      PITest();
      break;
    case 70:
      CommentTest();
      break;
    case 69:
      TextTest();
      break;
    case 67:
      AnyKindTest();
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AnyKindTest() throws ParseException {
 /*@bgen(jjtree) AnyKindTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTANYKINDTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(67);
      jj_consume_token(10);
      jj_consume_token(11);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DocumentTest() throws ParseException {
 /*@bgen(jjtree) DocumentTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDOCUMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(68);
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
      case 74:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 73:
          ElementTest();
          break;
        case 74:
          SchemaElementTest();
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      jj_consume_token(11);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TextTest() throws ParseException {
 /*@bgen(jjtree) TextTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTEXTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(69);
      jj_consume_token(10);
      jj_consume_token(11);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CommentTest() throws ParseException {
 /*@bgen(jjtree) CommentTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(70);
      jj_consume_token(10);
      jj_consume_token(11);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PITest() throws ParseException {
 /*@bgen(jjtree) PITest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPITEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(71);
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case StringLiteral:
      case External:
      case QNameToken:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 45:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case External:
        case QNameToken:
          NCName();
          break;
        case StringLiteral:
          jj_consume_token(StringLiteral);
                                                             SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
          try {
                                                             jjtree.closeNodeScope(jjtn001,  true);
                                                             jjtc001 = false;
                                                            processToken(jjtn001, token);
          } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001,  true);
                                                             }
          }
          break;
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(11);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AttributeTest() throws ParseException {
 /*@bgen(jjtree) AttributeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBUTETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(48);
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case External:
      case QNameToken:
        AttribNameOrWildcard();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          TypeName();
          break;
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      jj_consume_token(11);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AttribNameOrWildcard() throws ParseException {
 /*@bgen(jjtree) AttribNameOrWildcard */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBNAMEORWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case External:
      case QNameToken:
        AttributeName();
        break;
      case 17:
        jj_consume_token(17);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("*");
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SchemaAttributeTest() throws ParseException {
 /*@bgen(jjtree) SchemaAttributeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSCHEMAATTRIBUTETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(72);
      jj_consume_token(10);
      AttributeDeclaration();
      jj_consume_token(11);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AttributeDeclaration() throws ParseException {
 /*@bgen(jjtree) AttributeDeclaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBUTEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AttributeName();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ElementTest() throws ParseException {
 /*@bgen(jjtree) ElementTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(73);
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case External:
      case QNameToken:
        ElementNameOrWildcard();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          TypeName();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 64:
            jj_consume_token(64);
                                             jjtn000.processValue("?");
            break;
          default:
            jj_la1[61] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[62] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      jj_consume_token(11);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ElementNameOrWildcard() throws ParseException {
 /*@bgen(jjtree) ElementNameOrWildcard */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTNAMEORWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case External:
      case QNameToken:
        ElementName();
        break;
      case 17:
        jj_consume_token(17);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("*");
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SchemaElementTest() throws ParseException {
 /*@bgen(jjtree) SchemaElementTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSCHEMAELEMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(74);
      jj_consume_token(10);
      ElementDeclaration();
      jj_consume_token(11);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ElementDeclaration() throws ParseException {
 /*@bgen(jjtree) ElementDeclaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ElementName();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AttributeName() throws ParseException {
 /*@bgen(jjtree) AttributeName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBUTENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ElementName() throws ParseException {
 /*@bgen(jjtree) ElementName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TypeName() throws ParseException {
 /*@bgen(jjtree) TypeName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Pattern() throws ParseException {
 /*@bgen(jjtree) Pattern */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PathPattern();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
      case 22:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 21:
          jj_consume_token(21);
          break;
        case 22:
          jj_consume_token(22);
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Pattern();
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PathPattern() throws ParseException {
 /*@bgen(jjtree) PathPattern */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPATHPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Slash:
        jj_consume_token(Slash);
         SimpleNode jjtn001 = new SimpleNode(this, JJTSLASH);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
        try {
         jjtree.closeNodeScope(jjtn001,  true);
         jjtc001 = false;
        processToken(jjtn001, token);
        } finally {
         if (jjtc001) {
           jjtree.closeNodeScope(jjtn001,  true);
         }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 30:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 45:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case External:
        case QNameToken:
        case NCNameColonStar:
        case StarColonNCName:
          RelativePathPattern();
          break;
        default:
          jj_la1[67] = jj_gen;
          ;
        }
        break;
      case SlashSlash:
        jj_consume_token(SlashSlash);
              SimpleNode jjtn002 = new SimpleNode(this, JJTSLASHSLASH);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
        try {
              jjtree.closeNodeScope(jjtn002,  true);
              jjtc002 = false;
             processToken(jjtn002, token);
        } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  true);
              }
        }
        RelativePathPattern();
        break;
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case External:
      case QNameToken:
      case NCNameColonStar:
      case StarColonNCName:
        RelativePathPattern();
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RelativePathPattern() throws ParseException {
    PatternStep();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Slash:
    case SlashSlash:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Slash:
        jj_consume_token(Slash);
                          processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      case SlashSlash:
        jj_consume_token(SlashSlash);
                                                                                                 SimpleNode jjtn001 = new SimpleNode(this, JJTSLASHSLASH);
                                                                                                 boolean jjtc001 = true;
                                                                                                 jjtree.openNodeScope(jjtn001);
        try {
                                                                                                 jjtree.closeNodeScope(jjtn001,  true);
                                                                                                 jjtc001 = false;
                                                                                                processToken(jjtn001, token);
        } finally {
                                                                                                 if (jjtc001) {
                                                                                                   jjtree.closeNodeScope(jjtn001,  true);
                                                                                                 }
        }
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      RelativePathPattern();
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
  }

  final public void PatternStep() throws ParseException {
 /*@bgen(jjtree) PatternStep */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPATTERNSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_12(2)) {
        PatternAxis();
      } else {
        ;
      }
      NodeTest();
      PredicateList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PatternAxis() throws ParseException {
 /*@bgen(jjtree) PatternAxis */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPATTERNAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        jj_consume_token(45);
        jjtn000.processValue("child");
        jj_consume_token(46);
        break;
      case 48:
        jj_consume_token(48);
            jjtn000.processValue("attribute");
        jj_consume_token(46);
        break;
      case 54:
        jj_consume_token(54);
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NCName() throws ParseException {
 /*@bgen(jjtree) NCName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNCNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void QName() throws ParseException {
 /*@bgen(jjtree) QName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTQNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 30:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 45:
      case 47:
      case 49:
      case 50:
      case 51:
      case 52:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 75:
      case External:
      case QNameToken:
        FunctionQName();
        break;
      case 48:
        jj_consume_token(48);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                 jjtn000.processValue("attribute");
        break;
      case 70:
        jj_consume_token(70);
                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                  jjtc000 = false;
                                                                                 jjtn000.processValue("comment");
        break;
      case 68:
        jj_consume_token(68);
                                                                                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                      jjtc000 = false;
                                                                                                                                     jjtn000.processValue("document-node");
        break;
      case 73:
        jj_consume_token(73);
                                                                                                                                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                          jjtc000 = false;
                                                                                                                                                                                         jjtn000.processValue("element");
        break;
      case 9:
        jj_consume_token(9);
                                                                                                                                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                   jjtc000 = false;
                                                                                                                                                                                                                                  jjtn000.processValue("if");
        break;
      case 66:
        jj_consume_token(66);
                                                                                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                         jjtc000 = false;
                                                                                                                                                                                                                                                                        jjtn000.processValue("item");
        break;
      case 67:
        jj_consume_token(67);
                                                                                                                                                                                                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                 jjtc000 = false;
                                                                                                                                                                                                                                                                                                                jjtn000.processValue("node");
        break;
      case 71:
        jj_consume_token(71);
                                                                                                                                                                                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                           jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                          jjtn000.processValue("processing-instruction");
        break;
      case 72:
        jj_consume_token(72);
                                                                                                                                                                                                                                                                                                                                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                 jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                jjtn000.processValue("schema-attribute");
        break;
      case 74:
        jj_consume_token(74);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              jjtn000.processValue("schema-element");
        break;
      case 69:
        jj_consume_token(69);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("text");
        break;
      case 65:
        jj_consume_token(65);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   jjtc000 = false;
jjtn000.processValue("empty-sequence");
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionQName() throws ParseException {
 /*@bgen(jjtree) FunctionQName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONQNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QNameToken:
        jj_consume_token(QNameToken);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      case External:
        jj_consume_token(External);
                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                     jjtc000 = false;
                                                                                    processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      case 2:
        jj_consume_token(2);
                                                                                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                       jjtc000 = false;
                                                                                                                                                      jjtn000.processValue("return");
        break;
      case 3:
        jj_consume_token(3);
                                                                                                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                jjtc000 = false;
                                                                                                                                                                                               jjtn000.processValue("for");
        break;
      case 5:
        jj_consume_token(5);
                                                                                                                                                                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                     jjtc000 = false;
                                                                                                                                                                                                                                    jjtn000.processValue("in");
        break;
      case 6:
        jj_consume_token(6);
                                                                                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                           jjtc000 = false;
                                                                                                                                                                                                                                                                          jjtn000.processValue("some");
        break;
      case 7:
        jj_consume_token(7);
                                                                                                                                                                                                                                                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                    jjtc000 = false;
                                                                                                                                                                                                                                                                                                                   jjtn000.processValue("every");
        break;
      case 8:
        jj_consume_token(8);
                                                                                                                                                                                                                                                                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                  jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                 jjtn000.processValue("satisfies");
        break;
      case 12:
        jj_consume_token(12);
                                                                                                                                                                                                                                                                                                                                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                               jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                              jjtn000.processValue("then");
        break;
      case 13:
        jj_consume_token(13);
                                                                                                                                                                                                                                                                                                                                                                                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                       jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                      jjtn000.processValue("else");
        break;
      case 14:
        jj_consume_token(14);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            jjtn000.processValue("or");
        break;
      case 15:
        jj_consume_token(15);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("and");
        break;
      case 16:
        jj_consume_token(16);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      jjtn000.processValue("to");
        break;
      case 18:
        jj_consume_token(18);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("div");
        break;
      case 19:
        jj_consume_token(19);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("idiv");
        break;
      case 20:
        jj_consume_token(20);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          jjtc000 = false;
jjtn000.processValue("mod");
        break;
      case 21:
        jj_consume_token(21);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 jjtn000.processValue("union");
        break;
      case 23:
        jj_consume_token(23);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("intersect");
        break;
      case 24:
        jj_consume_token(24);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("except");
        break;
      case 25:
        jj_consume_token(25);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            jjtn000.processValue("instance");
        break;
      case 26:
        jj_consume_token(26);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("of");
        break;
      case 27:
        jj_consume_token(27);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("treat");
        break;
      case 29:
        jj_consume_token(29);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("castable");
        break;
      case 30:
        jj_consume_token(30);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("cast");
        break;
      case 36:
        jj_consume_token(36);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("eq");
        break;
      case 37:
        jj_consume_token(37);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("ne");
        break;
      case 38:
        jj_consume_token(38);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("lt");
        break;
      case 39:
        jj_consume_token(39);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("le");
        break;
      case 40:
        jj_consume_token(40);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("gt");
        break;
      case 41:
        jj_consume_token(41);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("ge");
        break;
      case 42:
        jj_consume_token(42);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("is");
        break;
      case 45:
        jj_consume_token(45);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("child");
        break;
      case 47:
        jj_consume_token(47);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           jjtc000 = false;
jjtn000.processValue("descendant");
        break;
      case 49:
        jj_consume_token(49);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("self");
        break;
      case 50:
        jj_consume_token(50);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              jjtn000.processValue("descendant-or-self");
        break;
      case 51:
        jj_consume_token(51);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("following-sibling");
        break;
      case 52:
        jj_consume_token(52);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           jjtn000.processValue("following");
        break;
      case 55:
        jj_consume_token(55);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          jjtn000.processValue("parent");
        break;
      case 56:
        jj_consume_token(56);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("ancestor");
        break;
      case 57:
        jj_consume_token(57);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("preceding-sibling");
        break;
      case 58:
        jj_consume_token(58);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("preceding");
        break;
      case 59:
        jj_consume_token(59);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("ancestor-or-self");
        break;
      case 75:
        jj_consume_token(75);
jjtree.closeNodeScope(jjtn000, true);
jjtc000 = false;
jjtn000.processValue("type");
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(53)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_3R_228()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(1)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(48)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(49)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(SlashSlash)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(15)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(50)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(47)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_144()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) return true;
    }
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(SlashSlash)) return true;
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(26)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_3R_217()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_221()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_3R_219()) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) jj_scanpos = xsp;
    if (jj_3R_223()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(74)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(45)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(External)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) return true;
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(25)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(70)) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(Slash)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) return true;
    }
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_212()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_213()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(Slash)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(Plus)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(48)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(72)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(LessThanOpOrTagO)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(QNameToken)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_3R_206()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(45)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(Minus)) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    return false;
  }

  final private boolean jj_3R_200() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_202()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_203()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_200()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(23)) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_198()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_3R_196()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(8)) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_192()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(25)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(23)) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(71)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(22)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_188()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_189()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(7)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(20)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(73)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_3R_182()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(67)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(72)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(20)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(48)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(Minus)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(DoubleLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_163()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_164()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(71)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(Plus)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    }
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(70)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(6)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(69)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(66)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(68)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_3R_158()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_159()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(67)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(16)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_153()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(DecimalLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_scan_token(StarColonNCName)) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(9)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_146()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(65)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_151()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(15)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_47()) return true;
    if (jj_scan_token(10)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(65)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(7)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(3)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(10)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_149()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_150()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(StringLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(58)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(4)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(IntegerLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(NCNameColonStar)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_147()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_148()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(16)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(59)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(57)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(51)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(9)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(52)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(56)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(61)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(69)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(6)) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_3R_225()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(2)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(3)) return true;
    if (jj_scan_token(4)) return true;
    return false;
  }

  public XPathTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[74];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2,0x6fbff7fc,0x2,0xc0,0x2,0x4000,0x8000,0x80000000,0x80000000,0x10000,0x0,0x0,0x1e0000,0x1e0000,0x600000,0x600000,0x1800000,0x1800000,0x2000000,0x8000000,0x20000000,0x40000000,0x0,0x0,0x80000000,0x0,0x0,0x6fbff7fc,0x6fbff7fc,0x0,0x0,0x6fbff3ec,0x6fbff3ec,0x6fbff3ec,0x0,0x0,0x0,0x0,0x6fbff3ec,0x6fbff3ec,0x20000,0x0,0x410,0x0,0x0,0x6fbff7fc,0x2,0x6fbff7fc,0x0,0x20000,0x6fbdf3ec,0x20000,0x6fbdf3ec,0x0,0x0,0x0,0x6fbdf3ec,0x6fbdf3ec,0x2,0x6fbff3ec,0x6fbff3ec,0x0,0x2,0x6fbff3ec,0x6fbff3ec,0x600000,0x600000,0x6fbff3ec,0x6fbff3ec,0x0,0x0,0x0,0x6fbdf3ec,0x6fbdf1ec,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x9fffa7f0,0x0,0x0,0x0,0x0,0x0,0x1fff,0x1fff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x3f0,0x1c00,0x9fffa7f0,0x9fffa7f0,0x0,0x0,0x1fffa7f0,0xfffa7f0,0xfdfa7f0,0x3fa000,0x400000,0x1f800000,0xf800000,0xf9fa7f0,0xf9fa7f0,0x0,0x20000000,0x80000000,0x0,0x0,0x9fffa7f0,0x0,0x9fffa7f0,0x0,0x0,0xf9fa7f0,0x0,0xf9fa7f0,0x10000,0x0,0x0,0xf9fa7f0,0xf9fa7f0,0x0,0xf9fa7f0,0xf9fa7f0,0x0,0x0,0xf9fa7f0,0xf9fa7f0,0x0,0x0,0xfdfa7f0,0xfdfa7f0,0x0,0x0,0x412000,0xf9fa7f0,0xf9ea7f0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x1cfffe,0x0,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x0,0xc0000,0xc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000,0xc0000,0x8000000,0x0,0x0,0x10fffe,0x10fffe,0x0,0x0,0x100ffe,0x100ffe,0x100ffe,0x0,0x0,0x0,0x0,0x100ffe,0x100ffe,0x0,0x0,0xf000,0xf000,0x7000,0x1cfffe,0x0,0x1cfffe,0x1,0x80001,0x100ffe,0x80001,0x100ffe,0x7f8,0x600,0x600,0x108ffe,0x108ffe,0x0,0x100ffe,0x100ffe,0x1,0x0,0x100ffe,0x100ffe,0x0,0x0,0x100ffe,0x100ffe,0x0,0x0,0x0,0x100ffe,0x100800,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x37,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x34,0x37,0x3,0x3,0x34,0x34,0x34,0x0,0x0,0x0,0x0,0x34,0x34,0x30,0x0,0x0,0x0,0x0,0x37,0x0,0x37,0x0,0x0,0x4,0x0,0x4,0x0,0x0,0x0,0x4,0x4,0x0,0x4,0x4,0x0,0x0,0x4,0x4,0x0,0x0,0x34,0x37,0x3,0x3,0x0,0x4,0x4,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public XPath(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new XPathTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 74; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 74; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XPath(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new XPathTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 74; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 74; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XPath(XPathTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 74; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(XPathTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 74; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[113];
    for (int i = 0; i < 113; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 74; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 113; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                }
